## Background

A feature can go through different phases throughout its lifecycle - maybe it’s still being tested out by a few users, or only recently fully rolled out to the world, or maybe it’s been tried and true and you no longer need the feature behind a toggle. 

Whatever phase the feature may be in, its gate should clearly reflect that, for a few important reasons - 

- **Prevent incidents**: prevent a scenario where old code for a deprecated feature is accidentally touched or repurposed, with real business consquences like how [Knight Capital lost half-a-billion dollars] (https://www.statsig.com/blog/lose-half-a-billion-dollars-with-bad-feature-flags-knight-capital)
- **Maintain healthy codebase**: messy code base with dead references to flags mean that your team has more volume of code to navigate on a daily basis, and it can even slow down new developers onboarding
- **Reduce mental load**: mental tracking of all your features is no longer necessary because you will be able to see easily what next steps you need to take for the product (e.g. launch or kill a feature), as well as not having to worry about old features that are no longer relevant.

## Managing the lifecycle of your feature gates on Statsig

Statsig makes it easy for your feature gates to reflect the phase your feature is in by using **status**. A gate can be in one of four statuses:

| Status | What it represents | Implication |
|-------------|-----------------------|---------|
| In Progress | this feature is in the process of being rolled out and tested. | N/A; it’s the default status when you create a gate |
| Launched |  this feature has been safely rolled out to everyone | This gate will always return **default value = TRUE**, and will stop generating billable exposure events; you’ll stop incurring costs. The gate reference is likely safe to be cleaned up in the codebase |
| Disabled       | this feature has been safely rolled back from everyone  | This gate will always return **default value = FALSE**, and will stop generating billable exposure events; you’ll stop incurring costs. The gate reference is likely safe to be cleaned up in the codebase |
| Archived  | this feature is now a permanent part of your codebase (i.e. flag reference has been removed) | This gate has been receiving 0 checks for the last 7 days, and no checks will be sent this gate anymore |

## When/How to update the status of a gate

1) When the gate has been fully rolled out or rolled back, and you want to skip rule evaluation (stop incurring costs for your gates)

Go to the feature gate page and click on “…” menu on the upper right corner to select “Launch or Disable”. It will open up the following window -
- **In Progress → Launch:** when ****the gate has been rolled out to 100% a while ago (i.e. >30days), and you feel comfortable with the gate always returning TRUE
- **In Progress → Disable:** when ****the gate has been rolled back to 0% a while go (i.e. >30 days), and you feel comfortable with the gate always returning FALSE


To find *all* gates that are good candidates to be **Launched** or **Disabled** (i.e. have been rolled out to 100% or rolled back to 0% more than 30 days ago):
- Go to Feature Gates catalog
  - Click on filter icon:
    - Status = In Progress
    - Pass Rate = 100% AND 0%
  - In the search bar: “Modified: <mm/dd/yyyy;” (update the date to be 30 days ago)
